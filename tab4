from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

with st.expander("🤖 머신러닝: 별점 예측"):
    st.markdown("이 분석은 고객 정보와 구매 특성으로부터 별점을 예측합니다.")
    
    ml_df = filtered_df.copy()
    ml_df = ml_df.dropna(subset=['Review Rating'])  # 별점 없는 경우 제거

    # 숫자로 변환
    ml_df_encoded = pd.get_dummies(ml_df[["Age", "Gender", "Category", "Payment Method", "Shopping Channel"]])
    ml_df_encoded["Purchase"] = ml_df["Purchase Amount (USD)"]
    X = ml_df_encoded
    y = ml_df["Review Rating"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)
    model = RandomForestRegressor()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    rmse = mean_squared_error(y_test, y_pred, squared=False)

    st.write(f"예측 RMSE (낮을수록 정확): {rmse:.2f}")

    # 사용자 입력으로 예측 테스트
    st.markdown("### 🎯 별점 예측 테스트")
    test_input = {
        "Age": st.slider("나이", 18, 70, 30),
        "Purchase": st.slider("구매금액", 10, 1000, 100),
        "Gender_Female": st.radio("성별", ["Female", "Male"]) == "Female",
        "Category_Clothing": st.radio("카테고리", ["Clothing", "Accessories", "Shoes"]) == "Clothing",
        "Payment Method_Credit Card": st.radio("결제 방식", ["Credit Card", "Paypal", "Cash"]) == "Credit Card",
        "Shopping Channel_Online": st.radio("쇼핑 채널", ["Online", "Offline"]) == "Online"
    }

    test_df = pd.DataFrame([test_input])
    y_test_pred = model.predict(test_df)[0]
    st.success(f"예측 별점: {y_test_pred:.2f} / 5.0")
